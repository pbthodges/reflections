When would you want to use a remote repository rather than keeping all your work local?

When you want to share with others.
When you want an offsite/off computer backup.


Why might you want to always pull changes manually rather than having git automatically stay up-to-date with your remote repository?

The remote repository may contain changes from a 3rd party which may conflict with what you are currently working on.



What is the result of merging two branches together? Why do we represent it in the diagram the way we do.

The history of commits is merged based on date/time, and a new commit is created which has parents of the 2 merged branches.
The diagram makes it easier to visualize the branches.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a copy of a repository made on github. Any changes made to the fork
version are not reflected in the history of the original. Github tracks the 
number of additional commits to the fork compared to the original.

A clone is a local copy of a repository made from github.

 A branch is a logical copy of the files taken at the current commit, the latestor whatever was most recently checked out. Changes to the fileset within a branch are kept separate from other branches, but branches may be merged in order for changes to be combined.

What is the benefit of having a copy of the last known state of the remote stored locally.

You could do a merge offline.


How would you collaborate without using Git or Github? What would be easier, and what
would be harder?

Have all files on a central file share. Rename a file with someones username as an extenision while they have
it in use. 
File can only be worked on by one person at a time.
No problems with merging as only one person working on files.
Modern Software systems tend to be spread over a lot more files than in the old days,
e.g. java has 1 file per class, therefore more chance of locking multiple files that other
people need, and if more than a few people are involved on the project, the whole thing will
grind to a halt waiting for others to finish their changes.

On the other hand, everyone could have their own copy, but then, without an efficient merging
control system, this would impose more overhead than was worth it.

let one person do all the work and take regular backups.!!!!

When woudl you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have.

Working on master is requires less effort to keep the github repository updated.

Working on a separate branch is better if you want to try new things and maintain separate
versions locally, and if you are collaborating with others.


